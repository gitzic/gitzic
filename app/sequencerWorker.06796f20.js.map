{"version":3,"sources":["Zic/sequencerWorker.ts"],"names":[],"mappings":";;;AAsEA,aA1DA,IAZA,IAAA,EAAA,QAAA,gBAsEA,EAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,QAAA,GAAA,IAAA,EAAA,GAAA,EAAA,IAAA,GAAA,MAAA,GAAA,mBAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,EAAA,EAAA,OAAA,IAAA,EAAA,QAAA,EAAA,IAAA,GAAA,OAAA,UAAA,qBAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,OAAA,GA9DM,EAAK,GACP,EAAU,EACR,EAAkC,EAArB,EAAqB,mBAClC,EAAyB,GACtB,EAAI,EAAG,EAAI,EAAY,IAC5B,EAAK,GAAK,GAmBd,SAAS,EAAa,GACb,IAAA,IAAI,EAAU,EAAG,EAAU,EAAK,OAAQ,IAAW,CAC9C,IAAA,EAAQ,EAAK,GAAS,UAAU,SAAC,GAAW,OAAP,EAAA,KAAc,EAAK,KAC1D,IAAW,IAAX,EACO,MAAA,CAAE,QAAO,EAAE,MAAK,IAKnC,SAAS,EAAS,GACR,IAAA,EAAM,EAAa,GACrB,GACI,EAAI,UAAY,EAAK,SACrB,EAAK,EAAI,SAAS,OAAO,EAAI,MAAO,GAExC,EAAK,EAAK,SAAS,EAAI,OAAS,GAEhC,EAAK,EAAK,SAAS,KAAK,GAIhC,SAAS,EAAa,GAClB,EAAM,QAAQ,GAGlB,SAAS,EAAW,GACV,IAAA,EAAM,EAAa,GACzB,GAAO,EAAK,EAAI,SAAS,OAAO,EAAI,MAAO,GAG/C,SAAS,EAAgB,GACrB,EAAM,QAAQ,GAGlB,SAAS,EAAK,GACT,KAAa,YAAY,GAnD9B,KAAK,iBACD,UACA,SAAC,GAAE,IAAA,EAAI,EAAA,KACC,EAAK,OAAS,EAAa,aAAA,KAC3B,EAAa,EAAK,OACX,EAAK,OAAS,EAAa,aAAA,OAClC,EAAgB,EAAK,OACd,EAAK,OAAS,EAAa,aAAA,SAClC,EAAS,EAAK,MACP,EAAK,OAAS,EAAa,aAAA,YAClC,EAAW,EAAK,QAGxB,GAyCJ,YAAY,WAER,EADA,GAAW,EAAU,GAAK,GACZ,QAAQ,SAAC,GAAE,IAAA,EAAE,EAAA,GAAE,EAAG,EAAA,IAAE,EAAQ,EAAA,SAAE,EAAK,EAAA,MAAK,EAAG,EAAA,EAAlC,CAAA,KAAA,MAAA,WAAA,UACb,EAAa,GAAM,GAAY,EAAQ,GAAK,IAClD,EAAI,EAAA,EAAA,GAAM,GAAG,CAAE,IAAK,EAAI,KAAM,KAAM,SAAU,KAC9C,WACI,WAAM,OAAA,EAAI,EAAA,EAAA,GAAM,GAAG,CAAE,IAAK,EAAK,KAAM,UACrC,MAGT","file":"sequencerWorker.06796f20.js","sourceRoot":"../src","sourcesContent":["import {\n    ActionWorker,\n    MAX_STEPS_PER_BEAT,\n    MsgWorker,\n    NoteInWorker,\n    DataOutWorker,\n} from '../interface';\n\nconst ms = 75;\nlet counter = 0;\nconst stepsCount = MAX_STEPS_PER_BEAT * 4;\nconst list: NoteInWorker[][] = [];\nfor (let n = 0; n < stepsCount; n++) {\n    list[n] = [];\n}\n\nself.addEventListener(\n    'message',\n    ({ data }: { data: MsgWorker }) => {\n        if (data.type === ActionWorker.save) {\n            saveSequence(data.notes);\n        } else if (data.type === ActionWorker.remove) {\n            removeSequences(data.notes);\n        } else if (data.type === ActionWorker.saveNote) {\n            saveNote(data.note);\n        } else if (data.type === ActionWorker.removeNote) {\n            removeNote(data.note);\n        }\n    },\n    false,\n);\n\nfunction findSequence(note: NoteInWorker) {\n    for (let trigger = 0; trigger < list.length; trigger++) {\n        const index = list[trigger].findIndex(({ id }) => id === note.id);\n        if (index !== -1) {\n            return { trigger, index };\n        }\n    }\n}\n\nfunction saveNote(note: NoteInWorker) {\n    const pos = findSequence(note);\n    if (pos) {\n        if (pos.trigger !== note.trigger) {\n            list[pos.trigger].splice(pos.index, 1);\n        }\n        list[note.trigger][pos.index] = note;\n    } else {\n        list[note.trigger].push(note);\n    }\n}\n\nfunction saveSequence(notes: NoteInWorker[]) {\n    notes.forEach(saveNote);\n}\n\nfunction removeNote(note: NoteInWorker) {\n    const pos = findSequence(note);\n    pos && list[pos.trigger].splice(pos.index, 1);\n}\n\nfunction removeSequences(notes: NoteInWorker[]) {\n    notes.forEach(removeNote);\n}\n\nfunction post(msg: DataOutWorker) {\n    (self as any).postMessage(msg);\n}\n\nsetInterval(() => {\n    counter = (counter + 1) % stepsCount;\n    list[counter].forEach(({ on, off, duration, slide, ...msg }) => {\n        const msDuration = ms * (duration + (slide ? 5 : -1));\n        post({ ...msg, msg: on, type: 'on', duration: msDuration });\n        setTimeout(\n            () => post({ ...msg, msg: off, type: 'off' }),\n            msDuration,\n        );\n    });\n}, ms);\n"]}