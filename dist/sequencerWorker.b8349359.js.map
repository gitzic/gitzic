{"version":3,"sources":["interface.ts","Zic/sequencerWorker.ts"],"names":[],"mappings":";AAAA,aAAA,IAAY,EAAZ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAAA,QAAA,aAAA,EAAA,SAAY,GACR,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,OAAA,GAAA,SAFJ,CAAY,IAAA,QAAA,aAAA,EAAY;;AC+CxB,aAzCA,IANA,IAAA,EAAA,QAAA,gBAEM,EAAK,IACP,EAAU,EACR,EAAa,GACb,EAA2B,GACxB,EAAI,EAAG,EAAI,EAAY,IAC5B,EAAK,GAAK,GAed,SAAS,EAAa,GACb,IAAA,IAAI,EAAU,EAAG,EAAU,EAAK,OAAQ,IAAW,CAC9C,IAAA,EAAQ,EAAK,GAAS,UAAU,SAAC,GAAW,OAAP,EAAA,KAAc,EAAS,KAC9D,IAAW,IAAX,EACO,MAAA,CAAE,QAAO,EAAE,MAAK,IAKnC,SAAS,EAAc,GACnB,EAAU,QAAQ,SAAC,GACT,IAAA,EAAM,EAAa,GACrB,GACI,EAAI,UAAY,EAAS,SACzB,EAAK,EAAI,SAAS,OAAO,EAAI,MAAO,GAExC,EAAK,EAAS,SAAS,EAAI,OAAS,GAEpC,EAAK,EAAS,SAAS,KAAK,KAKxC,SAAS,EAAgB,IAnCzB,KAAK,iBACD,UACA,SAAC,GAAE,IAAA,EAAI,EAAA,KACC,EAAK,SAAW,EAAa,aAAA,KAC7B,EAAc,EAAK,WACZ,EAAK,SAAW,EAAa,aAAA,QACpC,EAAgB,EAAK,aAG7B,GA4BJ,YAAY,WAER,EADA,GAAW,EAAU,GAAK,GACZ,QAAQ,SAAC,GAClB,KAAa,YAAY,MAE/B","file":"sequencerWorker.b8349359.js","sourceRoot":"../src","sourcesContent":["export enum ActionWorker {\n    save,\n    remove,\n}\n\nexport interface MsgWorker {\n    action: ActionWorker;\n    sequences: SequenceWorker[];\n}\n\nexport interface SequenceWorker {\n    id: string;\n    trigger: number;\n    parent?: string;\n    data: any;\n}\n","import { ActionWorker, MsgWorker, SequenceWorker } from '../interface';\n\nconst ms = 150;\nlet counter = 0;\nconst stepsCount = 16;\nconst list: SequenceWorker[][] = [];\nfor (let n = 0; n < stepsCount; n++) {\n    list[n] = [];\n}\n\nself.addEventListener(\n    'message',\n    ({ data }: { data: MsgWorker }) => {\n        if (data.action === ActionWorker.save) {\n            saveSequences(data.sequences);\n        } else if (data.action === ActionWorker.remove) {\n            removeSequences(data.sequences);\n        }\n    },\n    false,\n);\n\nfunction findSequence(sequence: SequenceWorker) {\n    for (let trigger = 0; trigger < list.length; trigger++) {\n        const index = list[trigger].findIndex(({ id }) => id === sequence.id);\n        if (index !== -1) {\n            return { trigger, index };\n        }\n    }\n}\n\nfunction saveSequences(sequences: SequenceWorker[]) {\n    sequences.forEach((sequence) => {\n        const pos = findSequence(sequence);\n        if (pos) {\n            if (pos.trigger !== sequence.trigger) {\n                list[pos.trigger].splice(pos.index, 1);\n            }\n            list[sequence.trigger][pos.index] = sequence;\n        } else {\n            list[sequence.trigger].push(sequence);\n        }\n    });\n}\n\nfunction removeSequences(sequences: SequenceWorker[]) {}\n\nsetInterval(() => {\n    counter = (counter + 1) % stepsCount;\n    list[counter].forEach((sequence) => {\n        (self as any).postMessage(sequence);\n    });\n}, ms);\n"]}