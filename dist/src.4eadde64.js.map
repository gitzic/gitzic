{"version":3,"sources":["interface.ts","midi.ts","index.ts"],"names":[],"mappings":";AAAA,aAAA,IAAY,EAAZ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAAA,SAAY,GACR,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,OAAA,GAAA,SAFJ,CAAY,EAAA,QAAA,eAAA,QAAA,aAAY;;ACAxB,aAUA,SAAS,EAAc,GACnB,QAAA,KAAO,EAEP,QAAA,KAAK,OAAO,QAAQ,SAAC,GACjB,QAAQ,IAAI,YAAa,EAAU,KAAM,GACzC,EAAU,cAAgB,IAQlC,SAAS,EAAY,GAEjB,QAAQ,MACJ,yEACA,GAIR,SAAS,EAAc,GAAM,EAAA,KAI7B,SAAgB,IACP,UAAU,kBAGX,UACK,kBAAkB,CAAE,OAAO,IAC3B,KAAK,EAAe,GAJzB,EAAY,IAAI,MAAM,6CAF9B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/BA,QAAA,SAAA,QAAA,UAAA,EA+BA,QAAA,SAAA;;AChBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAnBA,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,UAEM,EAAS,IAAI,OAAO,wCAEpB,EAAiB,CACnB,OAAQ,EAAA,aAAa,KACrB,UAAW,CACP,CAAE,GAAI,IAAK,QAAS,EAAG,KAAM,CAAC,IAAM,GAAI,KACxC,CAAE,GAAI,IAAK,QAAS,EAAG,KAAM,CAAC,IAAM,GAAI,IACxC,CAAE,GAAI,IAAK,QAAS,EAAG,KAAM,CAAC,IAAM,GAAI,KACxC,CAAE,GAAI,IAAK,QAAS,EAAG,KAAM,CAAC,IAAM,GAAI,IACxC,CAAE,GAAI,IAAK,QAAS,GAAI,KAAM,CAAC,IAAM,GAAI,KACzC,CAAE,GAAI,IAAK,QAAS,GAAI,KAAM,CAAC,IAAM,GAAI,MAGjD,EAAO,YAAY,GAEnB,EAAA,WACA,EAAO,iBAAiB,UAAW,SAAU,GAAE,IAAA,EAAI,EAAA,KAE/C,EAAA,KAAK,QAAQ,QAAQ,SAAC,GAClB,EAAW,KAAK,EAAK,UAE1B","file":"src.4eadde64.js","sourceRoot":"../src","sourcesContent":["export enum ActionWorker {\n    save,\n    remove,\n}\n\nexport interface MsgWorker {\n    action: ActionWorker;\n    sequences: SequenceWorker[];\n}\n\nexport interface SequenceWorker {\n    id: string;\n    trigger: number;\n    parent?: string;\n    data: any;\n}\n","// import { event, eventKey } from './event';\n\nexport let midi: WebMidi.MIDIAccess;\n\n// export function addListenerMidiSuccess(\n//     fn: (midiAccess: WebMidi.MIDIAccess) => void,\n// ) {\n//     event.addListener(eventKey.onMIDISuccess, fn);\n// }\n\nfunction onMIDISuccess(midiAccess: WebMidi.MIDIAccess) {\n    midi = midiAccess;\n    // event.emit(eventKey.onMIDISuccess, midi);\n    midi.inputs.forEach((midiInput) => {\n        console.log('midiInput', midiInput.name, midiInput);\n        midiInput.onmidimessage = onMIDIMessage;\n    });\n}\n\n// export function addListenerMidiError(fn: (error: any) => void) {\n//     event.addListener(eventKey.onMIDIError, fn);\n// }\n\nfunction onMIDIError(error: any) {\n    // event.emit(eventKey.onMIDIError, error);\n    console.error(\n        \"No access to MIDI devices or your browser doesn't support WebMIDI API.\",\n        error,\n    );\n}\n\nfunction onMIDIMessage({ data }: WebMidi.MIDIMessageEvent) {\n    // console.log('MIDI data', data);\n}\n\nexport function initMIDI() {\n    if (!navigator.requestMIDIAccess) {\n        onMIDIError(new Error('This browser does not support MIDIAccess'));\n    } else {\n        navigator\n            .requestMIDIAccess({ sysex: false })\n            .then(onMIDISuccess, onMIDIError);\n    }\n}\n","import { ActionWorker, MsgWorker } from './interface';\nimport { initMIDI, midi } from './midi';\n\nconst worker = new Worker('sequencerWorker.ts');\n\nconst msg: MsgWorker = {\n    action: ActionWorker.save,\n    sequences: [\n        { id: '1', trigger: 0, data: [0x90, 50, 90] },\n        { id: '2', trigger: 1, data: [0x80, 50, 0] },\n        { id: '3', trigger: 6, data: [0x90, 60, 90] },\n        { id: '4', trigger: 8, data: [0x80, 60, 0] },\n        { id: '5', trigger: 14, data: [0x90, 70, 90] },\n        { id: '6', trigger: 15, data: [0x80, 70, 0] },\n    ],\n};\nworker.postMessage(msg);\n\ninitMIDI();\nworker.addEventListener('message', function ({ data }) {\n    // console.log('data', data);\n    midi.outputs.forEach((midiOutput) => {\n        midiOutput.send(data.data);\n    });\n}, false);\n"]}