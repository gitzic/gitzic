{"version":3,"sources":["interface.ts","Zic/sequencerWorker.ts"],"names":[],"mappings":"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","file":"sequencerWorker.cf97582d.js","sourceRoot":"../src","sourcesContent":["export const MAX_STEPS_PER_BEAT = 8;\nexport const STEP_TICK = 1 / MAX_STEPS_PER_BEAT;\n\nexport enum ActionWorker {\n    save,\n    remove,\n}\n\nexport interface MsgWorker {\n    action: ActionWorker;\n    notes: NoteInWorker[];\n}\n\nexport interface NoteInWorker {\n    id: string;\n    outputId: string;\n    trigger: number;\n    duration: number;\n    slide?: boolean;\n    on: any;\n    off: any;\n}\n\n// NoteOutWorker?\nexport interface DataOutWorker {\n    id: string;\n    outputId: string;\n    data: any;\n}\n","import {\n    ActionWorker,\n    MAX_STEPS_PER_BEAT,\n    MsgWorker,\n    NoteInWorker,\n    DataOutWorker,\n} from '../interface';\n\nconst ms = 75;\nlet counter = 0;\nconst stepsCount = MAX_STEPS_PER_BEAT * 4;\nconst list: NoteInWorker[][] = [];\nfor (let n = 0; n < stepsCount; n++) {\n    list[n] = [];\n}\n\nself.addEventListener(\n    'message',\n    ({ data: { action, notes} }: { data: MsgWorker }) => {\n        if (action === ActionWorker.save) {\n            saveSequence(notes);\n        } else if (action === ActionWorker.remove) {\n            removeSequences(notes);\n        }\n    },\n    false,\n);\n\nfunction findSequence(note: NoteInWorker) {\n    for (let trigger = 0; trigger < list.length; trigger++) {\n        const index = list[trigger].findIndex(({ id }) => id === note.id);\n        if (index !== -1) {\n            return { trigger, index };\n        }\n    }\n}\n\nfunction saveSequence(notes: NoteInWorker[]) {\n    notes.forEach((note) => {\n        const pos = findSequence(note);\n        if (pos) {\n            if (pos.trigger !== note.trigger) {\n                list[pos.trigger].splice(pos.index, 1);\n            }\n            list[note.trigger][pos.index] = note;\n        } else {\n            list[note.trigger].push(note);\n        }\n    });\n}\n\nfunction removeSequences(sequences: NoteInWorker[]) {}\n\nfunction post(msg: DataOutWorker) {\n    (self as any).postMessage(msg);\n}\n\nsetInterval(() => {\n    counter = (counter + 1) % stepsCount;\n    list[counter].forEach(({ on, off, duration, slide, ...msg }) => {\n        post({ ...msg, data: on });\n        setTimeout(\n            () => post({ ...msg, data: off }),\n            ms * (duration + (slide ? 5 : 0)),\n        );\n    });\n}, ms);\n"]}