{"version":3,"sources":["interface.ts","Zic/sequencerWorker.ts"],"names":[],"mappings":";;;;;;ACAA,ADAA,ICAA,ADAY,WCAZ,CDAA,ECAA,OAAA,CAAA,cAAA,CAAA;;AAEA,ADFA,CAAA,GCEM,EAAE,GAAG,EDFC,CCEZ,WDFA,EAAwB;ACGxB,ADFI,EAAA,ECEA,OAAO,GAAG,ADFV,CCEJ,ADFI,YAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;ACGJ,ADFI,EAAA,ECEE,UAAU,ADFZ,CAAA,ECEe,EAAnB,QDFI,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;ACGJ,ADFC,CAHD,EAAY,CCKN,IAAI,GAAuB,EAAjC,EDLwB,GAAZ,OAAA,CAAA,YAAA,KAAA,OAAA,CAAA,YAAA,GAAY,EAAZ,CAAZ;;ACMA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAApB,EAAgC,CAAC,EAAjC,EAAqC;AACjC,EAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAV;AACH;;AAED,IAAI,CAAC,gBAAL,CACI,SADJ,EAEI,UAAC,EAAD,EAA8B;MAA3B,IAAI,GAAA,EAAA,CAAA;;AACH,MAAI,IAAI,CAAC,MAAL,KAAgB,WAAA,CAAA,YAAA,CAAa,IAAjC,EAAuC;AACnC,IAAA,aAAa,CAAC,IAAI,CAAC,SAAN,CAAb;AACH,GAFD,MAEO,IAAI,IAAI,CAAC,MAAL,KAAgB,WAAA,CAAA,YAAA,CAAa,MAAjC,EAAyC;AAC5C,IAAA,eAAe,CAAC,IAAI,CAAC,SAAN,CAAf;AACH;AACJ,CARL,EASI,KATJ;;AAYA,SAAS,YAAT,CAAsB,QAAtB,EAA8C;AAC1C,OAAK,IAAI,OAAO,GAAG,CAAnB,EAAsB,OAAO,GAAG,IAAI,CAAC,MAArC,EAA6C,OAAO,EAApD,EAAwD;AACpD,QAAM,KAAK,GAAG,IAAI,CAAC,OAAD,CAAJ,CAAc,SAAd,CAAwB,UAAC,EAAD,EAAO;UAAJ,EAAE,GAAA,EAAA,CAAA;AAAO,aAAA,EAAE,KAAK,QAAQ,CAAC,EAAhB;AAAkB,KAAtD,CAAd;;AACA,QAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,aAAO;AAAE,QAAA,OAAO,EAAA,OAAT;AAAW,QAAA,KAAK,EAAA;AAAhB,OAAP;AACH;AACJ;AACJ;;AAED,SAAS,aAAT,CAAuB,SAAvB,EAAkD;AAC9C,EAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,QAAD,EAAS;AACvB,QAAM,GAAG,GAAG,YAAY,CAAC,QAAD,CAAxB;;AACA,QAAI,GAAJ,EAAS;AACL,UAAI,GAAG,CAAC,OAAJ,KAAgB,QAAQ,CAAC,OAA7B,EAAsC;AAClC,QAAA,IAAI,CAAC,GAAG,CAAC,OAAL,CAAJ,CAAkB,MAAlB,CAAyB,GAAG,CAAC,KAA7B,EAAoC,CAApC;AACH;;AACD,MAAA,IAAI,CAAC,QAAQ,CAAC,OAAV,CAAJ,CAAuB,GAAG,CAAC,KAA3B,IAAoC,QAApC;AACH,KALD,MAKO;AACH,MAAA,IAAI,CAAC,QAAQ,CAAC,OAAV,CAAJ,CAAuB,IAAvB,CAA4B,QAA5B;AACH;AACJ,GAVD;AAWH;;AAED,SAAS,eAAT,CAAyB,SAAzB,EAAoD,CAAI;;AAExD,WAAW,CAAC,YAAA;AACR,EAAA,OAAO,GAAG,CAAC,OAAO,GAAG,CAAX,IAAgB,UAA1B;AACA,EAAA,IAAI,CAAC,OAAD,CAAJ,CAAc,OAAd,CAAsB,UAAC,QAAD,EAAS;AAC1B,IAAA,IAAY,CAAC,WAAb,CAAyB,QAAzB;AACJ,GAFD;AAGH,CALU,EAKR,EALQ,CAAX","file":"sequencerWorker.cf97582d.js","sourceRoot":"../src","sourcesContent":["export enum ActionWorker {\n    save,\n    remove,\n}\n\nexport interface MsgWorker {\n    action: ActionWorker;\n    sequences: SequenceWorker[];\n}\n\nexport interface SequenceWorker {\n    id: string;\n    trigger: number;\n    parent?: string;\n    data: any;\n}\n","import { ActionWorker, MsgWorker, SequenceWorker } from '../interface';\n\nconst ms = 150;\nlet counter = 0;\nconst stepsCount = 16;\nconst list: SequenceWorker[][] = [];\nfor (let n = 0; n < stepsCount; n++) {\n    list[n] = [];\n}\n\nself.addEventListener(\n    'message',\n    ({ data }: { data: MsgWorker }) => {\n        if (data.action === ActionWorker.save) {\n            saveSequences(data.sequences);\n        } else if (data.action === ActionWorker.remove) {\n            removeSequences(data.sequences);\n        }\n    },\n    false,\n);\n\nfunction findSequence(sequence: SequenceWorker) {\n    for (let trigger = 0; trigger < list.length; trigger++) {\n        const index = list[trigger].findIndex(({ id }) => id === sequence.id);\n        if (index !== -1) {\n            return { trigger, index };\n        }\n    }\n}\n\nfunction saveSequences(sequences: SequenceWorker[]) {\n    sequences.forEach((sequence) => {\n        const pos = findSequence(sequence);\n        if (pos) {\n            if (pos.trigger !== sequence.trigger) {\n                list[pos.trigger].splice(pos.index, 1);\n            }\n            list[sequence.trigger][pos.index] = sequence;\n        } else {\n            list[sequence.trigger].push(sequence);\n        }\n    });\n}\n\nfunction removeSequences(sequences: SequenceWorker[]) {}\n\nsetInterval(() => {\n    counter = (counter + 1) % stepsCount;\n    list[counter].forEach((sequence) => {\n        (self as any).postMessage(sequence);\n    });\n}, ms);\n"]}